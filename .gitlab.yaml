variables:
  APP_NAME: ethereum-protocol-front-end-next
  DEPLOY_NAME: ethereum-protocol-front-end-next
  DEPLOY_APP_NAME: ethereum-protocol-frontend-next
  VERSION: ""

stages:    
  - sonarqube
  - build
  - deploy

sonarqube-job:  
  stage: sonarqube
  rules:
    - if: '$CI_COMMIT_MESSAGE =~/updated package.json and package-lock.json/ || $CI_COMMIT_MESSAGE =~/deploy/'
      when: never 
    - if: '$CI_COMMIT_BRANCH==$CI_DEFAULT_BRANCH'
      when: always
    - when: never
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.projectKey=${project_key} -Dsonar.sources=./src -Dsonar.host.url=${url} -Dsonar.login=${sonar_token}
  allow_failure: true
  tags:
    - "Ethereum Protocol Frontend"

TAG-build-scan-push-job:   
  stage: build
  rules:
    - if: '$CI_COMMIT_MESSAGE =~/updated package.json and package-lock.json/ || $CI_COMMIT_MESSAGE =~/deploy/'
      when: never 
    - if: '$CI_COMMIT_BRANCH==$CI_DEFAULT_BRANCH'
      when: always
    - when: never
  image: docker:stable
  services:
    - name: docker:dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  variables:
    AWS_ACCESS_KEY_ID: ""
    AWS_SECRET_ACCESS_KEY: ""
    AWS_DEFAULT_REGION: ""
    DOCKER_REGISTRY: ""
    TAG: ""
    ACCESS_KEY_ID: ""
    SECRET_ACCESS_KEY: ""
    DEFAULT_REGION: ""
    DOCKERREGISTRY: ""
    tag: ""
    DOCKER_TLS_CERTDIR: ""
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
  before_script:
    - apk update && apk add nodejs npm 
    - apk update && apk add bash
    - node --version
    - npm --version
    - npm install -g json
    - VERSION=$(grep '"version"' package.json | cut -d '"' -f 4 | head -n 1)
    - apk add git
    - apk add openssh-client
    - git --version
    - eval $(ssh-agent -s)
    - echo "$private_key" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan code.zeeve.net >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.email "$EMAIL"
    - git config --global user.name "$USERNAME"
    - export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - echo $TRIVY_VERSION
    - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
    - VERSION=$(grep '"version"' package.json | cut -d '"' -f 4 | head -n 1)
    - apk add --no-cache curl jq python3 py3-pip
    - pip install awscli
    - aws --version
  allow_failure: true
  script:
    - git remote remove origin
    - git remote add origin git@code.zeeve.net:zeeve-platform/public-blockchain-protocols/ethereum-protocol-front-end-next.git
    - export TAGS=$(git ls-remote --tags origin "refs/tags/$VERSION")
    - chmod +x release-utility.sh
    - ./release-utility.sh
    - VERSION=$(grep '"version"' package.json | cut -d '"' -f 4 | head -n 1)
    - echo "$VERSION tag is created"
    - eval "$(./release-utility.sh variables)"
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_DEFAULT_REGION
    - aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
    - docker build --build-arg NEXT_PUBLIC_APP_URL="/ethereum-nextjs" --build-arg GITLAB_ACCESS_TOKEN=$GITLAB_ACCESS_TOKEN --network host -t $APP_NAME .
    - ./trivy image --exit-code 0 --format template --template "@contrib/gitlab.tpl" -o gl-container-scanning-report.json $APP_NAME
    - ./trivy image --exit-code 0 --severity HIGH $APP_NAME
    - ./trivy image --exit-code 0 --severity CRITICAL $APP_NAME
    - docker tag $APP_NAME:latest $DOCKER_REGISTRY/zeeve/$APP_NAME:$VERSION
    - docker push $DOCKER_REGISTRY/zeeve/$APP_NAME:$VERSION
    - echo "$VERSION is pushed"
  after_script:
    - VERSION=$(grep '"version"' package.json | cut -d '"' -f 4 | head -n 1)
    - echo $VERSION
    - chmod +x release-utility.sh
    - eval "$(./release-utility.sh variables)"
    - echo "Checking all docker images...."
    - docker images
    - echo "Removing all docker images...."
    - docker rmi $APP_NAME:latest || true
    - docker rmi $DOCKER_REGISTRY/zeeve/$APP_NAME:$VERSION || true
    - docker rmi $(docker images --filter "dangling=true" -q --no-trunc) || true
    - echo "After cleaning...."
    - docker images
  cache:
    paths:
      - .trivycache/
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
  tags:
     - "Ethereum Protocol Frontend Next"

deploy-job:      
  image: 
    name: amazon/aws-cli
    entrypoint: [""]
  services:
    - name: registry.hub.docker.com/library/docker:19.03.12-dind
      alias: docker
  stage: deploy
  variables:
    deploy_env: ""
    AWS_ACCESS_KEY_ID: "enter value"
    AWS_SECRET_ACCESS_KEY: "enter value"
    AWS_DEFAULT_REGION: "enter value"
    DOCKER_REGISTRY: "enter value"
    CLUSTER_NAME: "enter value"
    NAMESPACE: "enter value"
    TAG: "enter value"
    ACCESS_KEY_ID: "enter value"
    SECRET_ACCESS_KEY: "enter value"
    DEFAULT_REGION: "enter value"
    DOCKERREGISTRY: "enter value"
    CLUSTERNAME: "enter value"
    NAME_SPACE: "enter value"
    tag: "enter value"
  rules:
    - if: '$CI_COMMIT_MESSAGE =~/deploy/ && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $VERSION!="" &&  $deploy_env!=""'
      when: always
    - when: never
  before_script:
    - echo "Installing latest version of kubectl on amazon linux...."
    - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
    - mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
    - echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
    - kubectl version --short --client
  script:
    - ACCESS_KEY_ID="${deploy_env}_AWS_ACCESS_KEY_ID"
    - AWS_ACCESS_KEY_ID=${!ACCESS_KEY_ID}
    - SECRET_ACCESS_KEY="${deploy_env}_AWS_SECRET_ACCESS_KEY"
    - AWS_SECRET_ACCESS_KEY=${!SECRET_ACCESS_KEY}
    - DEFAULT_REGION="${deploy_env}_AWS_DEFAULT_REGION"
    - AWS_DEFAULT_REGION=${!DEFAULT_REGION}
    - DOCKERREGISTRY="${deploy_env}_DOCKER_REGISTRY"
    - DOCKER_REGISTRY=${!DOCKERREGISTRY}
    - CLUSTERNAME="${deploy_env}_CLUSTER_NAME"
    - CLUSTER_NAME=${!CLUSTERNAME}
    - NAME_SPACE="${deploy_env}_NAMESPACE"
    - NAMESPACE=${!NAME_SPACE}
    - tag="${deploy_env}_TAG"
    - TAG=${!tag}
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_DEFAULT_REGION
    - aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $CLUSTER_NAME
    - chmod +x release-utility.sh
    - ./release-utility.sh check zeeve/$APP_NAME $VERSION
    - kubectl set image deployment $DEPLOY_NAME $DEPLOY_APP_NAME=$DOCKER_REGISTRY/zeeve/$APP_NAME:$VERSION -n $NAMESPACE
    - kubectl rollout history deploy/$DEPLOY_NAME -n $NAMESPACE
  tags:
    - "Ethereum Protocol Frontend Next"
